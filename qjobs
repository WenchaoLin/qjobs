#!/usr/bin/python3
from subprocess import Popen, PIPE
from os.path import expanduser
import argparse
import configparser
import xml.etree.ElementTree as ET

parser = argparse.ArgumentParser(\
        description='qstat wrapper for better output',add_help=False)
parser.add_argument('-c','--config',\
        default=expanduser('~/.config/qjobs/qjobs.rc'),\
        help='specify config file',metavar='FILE')

args, remaining_argv = parser.parse_known_args()
conf_parser = configparser.ConfigParser()
conf_parser.read(args.config)
print(conf_parser.sections())
defaults = dict(conf_parser.items('Defaults'))

parser = argparse.ArgumentParser(parents=[parser])
parser.set_defaults(**defaults)

parser.add_argument('-o','--out',default='instqT',\
        help="""specify output format (default instqT):
        i: job id,     p: job prior,  n: job name,
        o: job owner,  s: job state,  t: start/sub time,
        q: queue,      l: slots,      T: total by state.""")
parser.add_argument('-d','--domain',action='store_true',\
        help='display queue domain')
parser.add_argument('-t','--total',action='store_true',\
        help='only total is displayed (same as `-o T`)')
parser.add_argument('-f','--file',type=argparse.FileType('r'),\
        help='use given xml file as input (for debug)')
args = parser.parse_args(remaining_argv)

if args.file:
    f = args.file
else:
    f = Popen('\qstat -u amorison -xml -r', shell=True, stdout=PIPE).stdout

if args.total: args.out = ''

columns = ''
for c in args.out:
    if c=='T': args.total = True
    if c in 'ipnostql': columns +=c

jobsTree = ET.parse(f)
jobsList = jobsTree.getroot().iter('job_list')

alljobs = []
bystate = {}

for j in jobsList:
    job = {}
    job['i'] = j.find('JB_job_number').text
    job['p'] = j.find('JAT_prio').text
    job['n'] = j.find('JB_name').text
    job['o'] = j.find('JB_owner').text
    job['s'] = j.find('state').text
    job['q'] = ''
    job['l'] = j.find('slots').text
    if job['s']=='r' :
        job['t'] = j.find('JAT_start_time').text
        job['q'] = j.find('queue_name').text
        if not args.domain:
            job['q'] = job['q'].rsplit('@')[0]
    elif job['s'] in ['dt','dr'] :
        job['t'] = j.find('JAT_start_time').text
    else:
        try:
            job['t'] = j.find('JB_submission_time').text
        except AttributeError:
            job['t'] = None
    if job['t']:
        job['t'] = job['t'].replace('T',' ')
    else:
        job['t'] = 'not set'

    try:
        bystate[job['s']] += 1
    except KeyError:
        bystate[job['s']] = 1

    alljobs.append(job)


if not alljobs:
    print('No pending or running job.')
else:
    if columns:
        l = {}
        for c in columns:
            l[c] = max(len(job[c]) for job in alljobs)

        for job in alljobs:
            print(*(job[c].ljust(l[c]) for c in columns), sep='   ')

    if args.total:
        a = [('tot',len(alljobs))] + list(bystate.items())
        print(*('{}: {}'.format(b,c) for b,c in a),sep='   ')
